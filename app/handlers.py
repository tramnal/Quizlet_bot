from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ContentType, BufferedInputFile
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import app.keyboards as kb
from app.database import db_requests as rq
from app.utils import WordData, validate_word, export_to_csv, MenuButtons

router = Router()


class DeleteStates(StatesGroup):
    waiting_for_word = State()
    confirm = State()


GREETINGS = {'–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello', 'hi', 'hey', '—Ö–∞–π', '—ç–π', '–∑–¥–æ—Ä–æ–≤'}

async def send_greeting(message: Message, state: FSMContext) -> None:
    '''Sends greeting message and help button'''
    await state.clear()
    await message.answer(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø Quizlet-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ.\n\n'
        'üì® –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, –∏ —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –ø–µ—Ä–µ–≤–æ–¥.\n\n'
        '‚ÑπÔ∏è –û –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∏ –ø—Ä–∞–≤–∏–ª–∞—Ö, –∫–∞—Å–∞—é—â–∏—Ö—Å—è —Å–ª–æ–≤, —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ "–°–ø—Ä–∞–≤–∫—É".',
        reply_markup=kb.main_menu()
    )

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext) -> None:
    '''Handles /start command, greets user and prompts for a word'''
    await send_greeting(message, state)

@router.message(lambda message: message.text and any(message.text.lower().startswith(greet) for greet in GREETINGS))
async def greetings(message: Message, state: FSMContext) -> None:
    '''Handles other informal greets from user'''
    await send_greeting(message, state)

@router.message(F.text == '–ï–≥–æ—Ä')
async def joke(message: Message) -> None:
    '''–ü–∞—Å—Ö–∞–ª–∫–∞ –¥–ª—è –ï–≥–æ—Ä—ã—á–∞:)'''
    await message.answer_photo(
        photo='https://imgur.com/a/rpuoDjk',
        caption='–¢–µ–∫–Ω–æ–ª–æ–¥–∂—ã–π—è!',
        reply_markup=kb.main_menu()
    )

@router.message(F.text == MenuButtons.HELP)
async def help(message: Message) -> None:
    '''Display help info'''
    await message.answer(
        '‚ÑπÔ∏è –ß—Ç–æ —è —É–º–µ—é:\n\n'
        'üá¨üáß –ù–∞–π—Ç–∏ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –ø–µ—Ä–µ–≤–æ–¥ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞\n'
        'üìò –ü—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n'
        'üîä –ü—Ä–∏—Å–ª–∞—Ç—å –æ–∑–≤—É—á–∫—É –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞\n'
        'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å\n'
        'üìÅ –ü—Ä–∏—Å–ª–∞—Ç—å —Ç–≤–æ–π —Å–ª–æ–≤–∞—Ä—å –≤ —Ñ–∞–π–ª–µ, —á—Ç–æ–± —Ç—ã –º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –Ω–∞ quizlet.com\n\n'
        '‚ùó –í–≤–æ–¥–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ (–±–µ–∑ —Ü–∏—Ñ—Ä, —Å–∏–º–≤–æ–ª–æ–≤, –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –ø—Ä–æ–±–µ–ª–æ–≤)'
    )

@router.message(F.text == MenuButtons.MY_WORDS)
async def show_user_words(message: Message) -> None:
    '''Shows user words saved in database'''
    tg_id = message.from_user.id
    words = await rq.get_all_user_words(tg_id)

    if not words:
        await message.answer('üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤...',
                                      reply_markup=kb.main_menu())
        return
    
    msg = 'üìö <b>–¢–≤–æ–∏ —Å–ª–æ–≤–∞:</b>\n\n' + '\n'.join(f'‚Ä¢ {w.word}' for w in words)
    await message.answer(msg, parse_mode='HTML')
    await message.answer(
        '‚ùî –ß—Ç–æ —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?\n'
        '–ú–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é,\n'
        '–ª–∏–±–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤–≤–æ–¥–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∏—Ö –≤ —Å–ª–æ–≤–∞—Ä—å',
        reply_markup=kb.main_menu()
    )

@router.message(F.text == MenuButtons.DELETE_WORD)
async def ask_word_to_del(message: Message, state: FSMContext) -> None:
    '''Asks user to input the word for deleting'''
    await message.answer("‚úÇÔ∏è –í–≤–µ–¥–∏ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ª–æ–≤–∞—Ä—è:",
                         reply_markup=kb.cancel_button())
    await state.set_state(DeleteStates.waiting_for_word)

@router.message(DeleteStates.confirm, F.text == MenuButtons.CANCEL)
async def cancel_clear_dict(message: Message, state: FSMContext):
    '''Cancels clear user's database'''
    await state.clear()
    await message.answer("‚ùå –û—á–∏—Å—Ç–∫–∞ —Å–ª–æ–≤–∞—Ä—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=kb.main_menu())

@router.message(F.text == MenuButtons.CANCEL)
async def cancel_delete(message: Message, state: FSMContext) -> None:
    '''Cancels deleting the word'''
    await state.clear()
    await message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main_menu())

@router.message(F.text == MenuButtons.CLEAR_DICT)
async def ask_clear_dict(message: Message, state: FSMContext):
    '''Asks confirmation to clear user's dict'''
    await state.set_state(DeleteStates.confirm)
    await message.answer("‚ö†Ô∏è –¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–≤–æ–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è?",
                         reply_markup=kb.confirm_clear_dict())

@router.message(F.text == MenuButtons.EXPORT)
async def send_csv(message: Message) -> None:
    '''Sends user dict in csv file'''
    tg_id = message.from_user.id
    csv_dict = await export_to_csv(tg_id)

    if csv_dict == None:
        await message.answer('üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤...',
                             reply_markup=kb.main_menu())
        return
    
    await message.answer_document(
        document=BufferedInputFile(
            file=csv_dict.read(),
            filename='my_words.csv'
        ),
        caption='üìÑ –í–æ—Ç —Ç–≤–æ–π —Å–ª–æ–≤–∞—Ä—å. –ú–æ–∂–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –Ω–∞ quizlet.com,\n'
        '—á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è'
    )

@router.message(DeleteStates.confirm, F.text == '‚úÖ –î–∞')
async def confirm_clear_dict(message: Message, state: FSMContext):
    '''Confirms clear user's dict'''
    tg_id = message.from_user.id
    await rq.clear_user_db(tg_id)
    await state.clear()
    await message.answer('üëå –°–ª–æ–≤–∞—Ä—å –æ—á–∏—â–µ–Ω', reply_markup=kb.main_menu())

@router.message(DeleteStates.waiting_for_word)
async def delete_word(message: Message, state: FSMContext) -> None:
    '''Deletes user word if exists.'''
    word = message.text.strip().lower()
    tg_id = message.from_user.id

    deleted = await rq.delete_word_from_db(tg_id, word)
    if deleted:
        await message.answer(f'‚úÖ –°–ª–æ–≤–æ <b>{word}</b> —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è.',
                             parse_mode='HTML',
                             reply_markup=kb.main_menu())
    else:
        await message.answer(f'‚ö†Ô∏è –°–ª–æ–≤–æ <b>{word}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–≤–æ—ë–º —Å–ª–æ–≤–∞—Ä–µ.',
                             parse_mode='HTML',
                             reply_markup=kb.main_menu())

    await state.clear()

@router.message(F.content_type == ContentType.TEXT)
async def handle_word(message: Message, state: FSMContext) -> None:
    '''The main handler. Validates word, fetches data and show buttons'''
    word = await validate_word(message, message.text)
    if not word:
        return
    
    tg_id = message.from_user.id
    word_data: WordData = await rq.get_word_from_db_or_api(tg_id, word)

    if not word_data.transcription and not word_data.example and not word_data.audio_url:
        await message.answer(
            f'‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –ø–æ —Å–ª–æ–≤—É <b>{word_data.word}</b>\n\n'
            f'{word_data.translation}',
            parse_mode='HTML'
        )
        return
    
    await state.update_data(word_data=word_data.model_dump())
    await message.answer(
        f"üìò <b>{word_data.word}</b>\n"
        f"üîä <u>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</u>: <b>{word_data.transcription or '-–Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏-'}</b>\n"
        f"üåç <u>–ü–µ—Ä–µ–≤–æ–¥</u>: <b>{word_data.translation or '-–Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞-'}</b>\n",
        reply_markup=kb.word_options(),
        parse_mode='HTML'
    )

@router.callback_query(F.data == 'example')
async def send_example(callback: CallbackQuery, state: FSMContext) -> None:
    '''Sends example using in sentences'''
    await callback.answer('üîÑ –ò—â—É –ø—Ä–∏–º–µ—Ä...')

    data = await state.get_data()
    example = data.get('word_data', {}).get('example')

    if example:
        await callback.message.answer(f'üìñ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {example}',
                                      reply_markup=kb.main_menu())
    else:
        await callback.message.answer(f'‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.',
                                      reply_markup=kb.main_menu())

@router.callback_query(F.data == 'audio')
async def send_audio(callback: CallbackQuery, state: FSMContext) -> None:
    '''Sends pronunciation audio of word'''
    await callback.answer('üîä –ì–æ—Ç–æ–≤–ª—é –æ–∑–≤—É—á–∫—É...')

    data = await state.get_data()
    audio_url = data.get('word_data', {}).get('audio_url')

    if audio_url:
        await callback.message.answer_audio(audio_url,
                                            reply_markup=kb.main_menu())
    else:
        await callback.message.answer(f'‚ö†Ô∏è –û–∑–≤—É—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.',
                                      reply_markup=kb.main_menu())
    
@router.callback_query(F.data == 'add')
async def add_to_db(callback: CallbackQuery, state: FSMContext) -> None:
    '''Save word data to database'''
    data = await state.get_data()
    word_data = data.get('word_data')
    tg_id = callback.from_user.id

    added = await rq.add_user_word(
        tg_id=tg_id,
        word=word_data['word'],
        transcription=word_data.get('transcription') or '',
        translation=word_data.get('translation') or '',
        example=word_data.get('example') or '',
        audio_url=word_data.get('audio_url') or ''
    )

    if added:
        await callback.answer('‚úÖ –°–ª–æ–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
        await callback.message.answer(text='üëÄ –•–æ—á–µ—à—å –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å?',
                                      reply_markup=kb.main_menu())
    else:
        await callback.answer('üìö –°–ª–æ–≤–æ —É–∂–µ –≤ —Å–ª–æ–≤–∞—Ä–µ', show_alert=True)
        await callback.message.answer(text='üëÄ –•–æ—á–µ—à—å –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å?',
                                      reply_markup=kb.main_menu())

@router.message()
async def unsupported_message(message: Message) -> None:
    '''Handles another messages from user, like audio, voice, loco, pics and etc.'''
    await message.answer('‚ö†Ô∏è –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –ø—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ.',
                         reply_markup=kb.main_menu())
