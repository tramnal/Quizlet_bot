from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

import app.keyboards as kb
from app.database import db_requests as rq
from app.utils import WordData, validate_word

router = Router()

GREETINGS = {'–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello', 'hi', 'hey', '—Ö–∞–π', '—ç–π', '–∑–¥–æ—Ä–æ–≤'}

async def send_greeting(message: Message, state: FSMContext) -> None:
    '''Sends greeting message and help button'''
    await state.clear()
    await message.answer(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø Quizlet-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ.\n\n'
        'üì® –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, –∏ —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –ø–µ—Ä–µ–≤–æ–¥.\n\n'
        '‚ÑπÔ∏è –û –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∏ –ø—Ä–∞–≤–∏–ª–∞—Ö, –∫–∞—Å–∞—é—â–∏—Ö—Å—è —Å–ª–æ–≤, —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ "–°–ø—Ä–∞–≤–∫—É".',
        reply_markup=kb.help_button()
    )

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext) -> None:
    '''Handles /start command, greets user and prompts for a word'''
    await send_greeting(message, state)

@router.message(lambda message: message.text and any(message.text.lower().startswith(greet) for greet in GREETINGS))
async def greetings(message: Message, state: FSMContext) -> None:
    '''Handles other informal greets from user'''
    await send_greeting(message, state)

@router.callback_query(F.data == 'help')
async def help(callback: CallbackQuery) -> None:
    '''Display help info'''
    await callback.message.edit_text(
        '‚ÑπÔ∏è –ß—Ç–æ —è —É–º–µ—é:\n'
        'üá¨üáß –ù–∞–π—Ç–∏ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –ø–µ—Ä–µ–≤–æ–¥ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞\n'
        'üìò –ü—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n'
        'üîä –ü—Ä–∏—Å–ª–∞—Ç—å –æ–∑–≤—É—á–∫—É –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞\n'
        'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å\n\n'
        '‚ùó –í–≤–æ–¥–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ (–±–µ–∑ —Ü–∏—Ñ—Ä, —Å–∏–º–≤–æ–ª–æ–≤, –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –ø—Ä–æ–±–µ–ª–æ–≤)'
    )
    await callback.answer()

@router.message()
async def handle_word(message: Message, state: FSMContext) -> None:
    '''The main handler. Validates word, fetches data and show buttons'''
    word = await validate_word(message, message.text)
    if not word:
        return
    
    tg_id = message.from_user.id
    word_data: WordData = await rq.get_word_from_db_or_api(tg_id, word)

    if not word_data:
        await message.answer('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ.')
        return
    
    await state.update_data(word_data=word_data.model_dump())
    await message.answer(
        f"üìò <b>{word_data.word}</b>\n"
        f"üîä –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <i>{word_data.transcription or '-–Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏-'}</i>\n"
        f"üåç –ü–µ—Ä–µ–≤–æ–¥: <i>{word_data.translation or '-–Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞-'}</i>\n",
        reply_markup=kb.word_options(),
        parse_mode='HTML'
    )

@router.callback_query(F.data == 'example')
async def send_example(callback: CallbackQuery, state: FSMContext) -> None:
    '''Sends example using in sentences'''
    await callback.answer('üîÑ –ò—â—É –ø—Ä–∏–º–µ—Ä...')

    data = await state.get_data()
    example = data.get('word_data', {}).get('example')

    if example:
        await callback.message.answer(f'üìñ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {example}')
    else:
        await callback.message.answer(f'‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.')

@router.callback_query(F.data == 'audio')
async def send_audio(callback: CallbackQuery, state: FSMContext) -> None:
    '''Sends pronunciation audio of word'''
    await callback.answer('üîä –ì–æ—Ç–æ–≤–ª—é –æ–∑–≤—É—á–∫—É...')

    data = await state.get_data()
    audio_url = data.get('word_data', {}).get('audio_url')

    if audio_url:
        await callback.message.answer_audio(audio_url)
    else:
        await callback.message.answer(f'‚ö†Ô∏è –û–∑–≤—É—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
    
@router.callback_query(F.data == 'add')
async def add_to_db(callback: CallbackQuery, state: FSMContext) -> None:
    '''Save word data to database'''
    data = await state.get_data()
    word_data = data.get('word_data')
    tg_id = callback.from_user.id

    added = await rq.add_user_word(
        tg_id=tg_id,
        word=word_data['word'],
        transcription=word_data.get('transcription') or '',
        translation=word_data.get('translation') or '',
        example=word_data.get('example') or '',
        audio_url=word_data.get('audio_url') or ''
    )

    if added:
        await callback.answer('‚úÖ –°–ª–æ–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
    else:
        await callback.answer('üìö –°–ª–æ–≤–æ —É–∂–µ –≤ —Å–ª–æ–≤–∞—Ä–µ', show_alert=True)
